[PHYSICAL]
RadiusAdd=0.7              // Base radius to apply damage
RadiusMult=0.00014         // Multiplied by collision impulse to increase radius
RadiusMax=1.6              // Maximum radius to apply damage
Engine=20000.0             // Impulse to seize engine
AeroDiv=1.25e-5            // Multiplied by impulse to affect aerodynamics and vertices
AeroMin=1100.0              // Minimum impulse to damage aero and verts (unlike everything else, computed BEFORE damage multiplier)
VertMult=1.0               // Multiplied by aero damage to get vert damage
RadiatorCoverInstance=FWING    // If this gets knocked off, engine cools but aerodynamics suffer
DeactivateInstance=SimpleEngine  // Deactivate this instance if any parts get knocked off
ActivateInstance=DetailedEngine  // Activate this instance if any parts get knocked off
WallSkidThresh=2500.0      // Minimum impulse to generate wall skid (ignores damage setting and multiplier)
FrontWingDetach=16500.0     // Minimum impulse to detach front wing
FrontWingRandom=1.0        // Fraction of time wing breaks off
FrontWingPos=(0.0,0.0,0.0) // If zero, automatically finds position of wing from graphics to check for damage
FrontWingMassInertia=(35.0, 3.0, 10.0, 3.0) // Mass and inertia
FrontWingCollParams=(4600.0, 185.0, 0.60)   // Spring/damper/friction
RearWingDetach=10000.0      // Minimum impulse to detach rear wing
RearWingRandom=1.0         // Fraction of time wing breaks off
RearWingPos=(0.0,0.0,0.0)  // If zero, automatically finds position of wing from graphics to check for damage
RearWingMassInertia=(20.0, 1.0, 4.0, 1.0) // Mass and inertia
RearWingCollParams=(1600.0, 185.0, 0.60)   // Spring/damper/friction
WheelBend=12000.0           // Impulse to bend wheel
WheelDetach=18000.0         // Threshold to detach wheel
WheelRandom=0.50           // Fraction of incidents where wheel actually breaks off
Wheel0MassInertia=(22.0, 1.292,0.724,0.724) // Mass and inertia
Wheel0CollParams=(11250.0, 110.0, 1.00) // Spring/damper/friction
Wheel1MassInertia=(22.0, 1.292,0.724,0.724) // Mass and inertia
Wheel1CollParams=(11250.0, 110.0, 1.00) // Spring/damper/friction
Wheel2MassInertia=(22.0, 1.292,0.724,0.724) // Mass and inertia
Wheel2CollParams=(11250.0, 110.0, 1.00) // Spring/damper/friction
Wheel3MassInertia=(22.0, 1.292,0.724,0.724) // Mass and inertia
Wheel3CollParams=(11250.0, 110.0, 1.00) // Spring/damper/friction
Part0Detach=13000.0         // Impulse to make part become debris (see .gen file)
Part0Random=0.85            // Fraction of time part breaks off
Part0Pos=(0.0,0.0,0.0)     // If zero, automatically finds position of part from graphics to check for damage
Part0MassInertia=(20.0, 25.0, 22.0, 33.0) // Mass and inertia
Part0CollParams=(7200.0, 1000.0, 0.80)  // Spring/damper/friction
Part1Detach=9500.0         // Impulse to make part become debris (see .gen file)
Part1Random=0.5            // Fraction of time part breaks off
Part1Pos=(0.0,0.0,0.0)     // If zero, automatically finds position of part from graphics to check for damage
Part1MassInertia=(20.0, 25.0, 22.0, 33.0) // Mass and inertia
Part1CollParams=(8600.0, 1650.0, 0.90)   // Spring/damper/friction
Part2Detach=9500.0         // Impulse to make part become debris (see .gen file)
Part2Random=0.5            // Fraction of time part breaks off
Part2Pos=(0.0,0.0,0.0)     // If zero, automatically finds position of part from graphics to check for damage
Part2MassInertia=(20.0, 25.0, 22.0, 33.0) // Mass and inertia
Part2CollParams=(7200.0, 1000.0, 0.80)   // Spring/damper/friction
Part3Detach=9500.0         // Impulse to make part become debris (see .gen file)
Part3Random=0.5            // Fraction of time part breaks off
Part3Pos=(0.0,0.0,0.0)     // If zero, automatically finds position of part from graphics to check for damage
Part3MassInertia=(20.0, 25.0, 22.0, 33.0) // Mass and inertia
Part3CollParams=(7200.0, 1000.0, 0.80)  // Spring/damper/friction
Part4Detach=9500.0         // Impulse to make part become debris (see .gen file)
Part4Random=0.5            // Fraction of time part breaks off
Part4Pos=(0.0,0.0,0.0)     // If zero, automatically finds position of part from graphics to check for damage
Part4MassInertia=(20.0, 25.0, 22.0, 33.0) // Mass and inertia
Part4CollParams=(7200.0, 1000.0, 0.80) // Spring/damper/friction
Part5Detach=9500.0         // Impulse to make part become debris (see .gen file)
Part5Random=0.5            // Fraction of time part breaks off
Part5Pos=(0.0,0.0,0.0)     // If zero, automatically finds position of part from graphics to check for damage
Part5MassInertia=(20.0, 25.0, 22.0, 33.0) // Mass and inertia
Part5CollParams=(7200.0, 1000.0, 0.80) // Spring/damper/friction
Part6Detach=9500.0         // Impulse to make part become debris (see .gen file)
Part6Random=0.5            // Fraction of time part breaks off
Part6Pos=(0.0,0.0,0.0)     // If zero, automatically finds position of part from graphics to check for damage
Part6MassInertia=(20.0, 25.0, 22.0, 33.0) // Mass and inertia
Part6CollParams=(7200.0, 1000.0, 0.80) // Spring/damper/friction
Part7Detach=9500.0         // Impulse to make part become debris (see .gen file)
Part7Random=0.5            // Fraction of time part breaks off
Part7Pos=(0.0,0.0,0.0)     // If zero, automatically finds position of part from graphics to check for damage
Part7MassInertia=(20.0, 25.0, 22.0, 33.0) // Mass and inertia
Part7CollParams=(7200.0, 1000.0, 0.80)  // Spring/damper/friction

// VERTEX DAMAGE:
//
// This section defines how verts can be moved.  There are three available rules currently:
//
// 1) You can restrict all verts to move a given distance by default:
//    - DefaultLimit=<maximum movement>
//
// 2) You can restrict all verts within a given sphere to move a given distance:
//    - RestrictionLimit=<maximum movement>
//    - RestrictionSphere=(<x>, <y>, <z>, <radius>)
//    You can change the limit before each sphere, or continue to use the last one defined.
//
// 3) You can prevent all verts from entering a given sphere:
//    - ForceFieldSphere=(<x>, <y>, <z>, <radius>)
//    Verts within the sphere cannot get any closer to the center.
//
// Note that the verts here are relative to the graphics model, not the physical CG.  To
// make things difficult, the graphics model isn't necessarily centered or anything.

[VERTEX]
DefaultLimit=1.00
RestrictionLimit=0.10
RestrictionSphere=(0.00, 0.50, 0.0, 1.5)    // Restrict verts from colliding with rollcage
ForceFieldSphere=(-0.440221,0.4,-0.103944,0.45) //Created with rF_ForceFieldSphere Exporter By A.Piemontesi
ForceFieldSphere=(0.0,0.35,-1.83802,0.45) //Created with rF_ForceFieldSphere Exporter By A.Piemontesi
ForceFieldSphere=(0.52525,0.35,-1.51013,0.47) //Created with rF_ForceFieldSphere Exporter By A.Piemontesi
ForceFieldSphere=(-0.46164,0.35,-1.51906,0.47) //Created with rF_ForceFieldSphere Exporter By A.Piemontesi
ForceFieldSphere=(0.57455,0.35,1.44,0.47) //Created with rF_ForceFieldSphere Exporter By A.Piemontesi
ForceFieldSphere=(-0.554186,0.35,1.44,0.47) //Created with rF_ForceFieldSphere Exporter By A.Piemontesi
DeformableInstance=SLOT
DeformableInstance=FWING
DeformableInstance=RWING
DeformableInstance=DEBRIS9
DeformableInstance=DEBRIS10
DeformableInstance=DEBRIS0                 // You can leave this even if your vehicle doesn't have one
DeformableInstance=DEBRIS1                 // You can leave this even if your vehicle doesn't have one
DeformableInstance=DEBRIS2                 // You can leave this even if your vehicle doesn't have one
DeformableInstance=DEBRIS3                 // You can leave this even if your vehicle doesn't have one
DeformableInstance=DEBRIS4                 // You can leave this even if your vehicle doesn't have one
DeformableInstance=DEBRIS5                 // You can leave this even if your vehicle doesn't have one

